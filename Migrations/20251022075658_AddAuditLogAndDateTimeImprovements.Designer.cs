// <auto-generated />
using System;
using AuroraInvoice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuroraInvoice.Migrations
{
    [DbContext(typeof(AuroraDbContext))]
    [Migration("20251022075658_AddAuditLogAndDateTimeImprovements")]
    partial class AddAuditLogAndDateTimeImprovements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("AuroraInvoice.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ABN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccentColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoBackupEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoBackupIntervalDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackupFolderPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefaultGSTRate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultPaymentTermsDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoicePrefix")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastBackupDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("NextInvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThemeColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccentColor = "#7c3aed",
                            AutoBackupEnabled = false,
                            AutoBackupIntervalDays = 7,
                            BusinessName = "My Business",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultGSTRate = 0.10m,
                            DefaultPaymentTermsDays = 30,
                            InvoicePrefix = "INV-",
                            NextInvoiceNumber = 1,
                            ThemeColor = "#2563eb"
                        });
                });

            modelBuilder.Entity("AuroraInvoice.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AuroraInvoice.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ABN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AuroraInvoice.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("StackTrace")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAction")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("AuroraInvoice.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GSTAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("AuroraInvoice.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stationery, printer supplies, etc.",
                            IsActive = true,
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Office or workspace rental",
                            IsActive = true,
                            Name = "Rent"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Electricity, water, internet, phone",
                            IsActive = true,
                            Name = "Utilities"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Transportation, accommodation, meals",
                            IsActive = true,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cloud services, software licenses",
                            IsActive = true,
                            Name = "Software Subscriptions"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Legal, accounting, consulting",
                            IsActive = true,
                            Name = "Professional Services"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Promotional materials, online ads",
                            IsActive = true,
                            Name = "Marketing & Advertising"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Computers, furniture, machinery",
                            IsActive = true,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Business insurance premiums",
                            IsActive = true,
                            Name = "Insurance"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Miscellaneous expenses",
                            IsActive = true,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AuroraInvoice.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GSTAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AuroraInvoice.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GSTAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GSTRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("AuroraInvoice.Models.InvoiceTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomFooterText")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeaderColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemDescriptionLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemNumberLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemQuantityLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemServiceDateLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemTotalLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemUnitPriceLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowABN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowBusinessAddress")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowBusinessEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowBusinessLogo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowBusinessPhone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerABN")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerAddress")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerContactPerson")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerName")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerPhone")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowDueDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowGSTTotal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowGrandTotal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowInvoiceDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowInvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemDescription")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemGST")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemServiceDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemTotal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowItemUnitPrice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowNotes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPaymentTerms")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowServiceDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSubtotal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowThankYouMessage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccentColor = "#008080",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            HeaderColor = "#008080",
                            IsDefault = true,
                            ItemDescriptionLabel = "Item & Description",
                            ItemNumberLabel = "#",
                            ItemQuantityLabel = "Hrs",
                            ItemServiceDateLabel = "Service Date",
                            ItemTotalLabel = "Amount",
                            ItemUnitPriceLabel = "Rate",
                            ShowABN = true,
                            ShowBusinessAddress = true,
                            ShowBusinessEmail = true,
                            ShowBusinessLogo = false,
                            ShowBusinessPhone = true,
                            ShowCustomerABN = false,
                            ShowCustomerAddress = true,
                            ShowCustomerContactPerson = false,
                            ShowCustomerEmail = false,
                            ShowCustomerName = true,
                            ShowCustomerPhone = false,
                            ShowDueDate = false,
                            ShowGSTTotal = false,
                            ShowGrandTotal = true,
                            ShowInvoiceDate = true,
                            ShowInvoiceNumber = true,
                            ShowItemDescription = true,
                            ShowItemGST = false,
                            ShowItemNumber = true,
                            ShowItemQuantity = true,
                            ShowItemServiceDate = true,
                            ShowItemTotal = true,
                            ShowItemUnitPrice = true,
                            ShowNotes = false,
                            ShowPaymentTerms = false,
                            ShowServiceDate = false,
                            ShowSubtotal = false,
                            ShowThankYouMessage = false,
                            TemplateName = "NDIS Service Invoice"
                        });
                });

            modelBuilder.Entity("AuroraInvoice.Models.Expense", b =>
                {
                    b.HasOne("AuroraInvoice.Models.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AuroraInvoice.Models.Invoice", b =>
                {
                    b.HasOne("AuroraInvoice.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AuroraInvoice.Models.InvoiceItem", b =>
                {
                    b.HasOne("AuroraInvoice.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AuroraInvoice.Models.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("AuroraInvoice.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("AuroraInvoice.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
